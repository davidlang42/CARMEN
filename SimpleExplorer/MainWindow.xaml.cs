using Microsoft.EntityFrameworkCore;
using Model;
using SimpleExplorer;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Section = Model.Section;

namespace App
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private readonly DbContextOptions<ShowContext> contextOptions = new DbContextOptionsBuilder<ShowContext>()
            .UseSqlite("Data Source=test.db").Options; //TODO real connection string

        private ShowContext _context;

        private readonly CollectionViewSource applicantsViewSource;
        private readonly CollectionViewSource castGroupsViewSource;
        private readonly CollectionViewSource rootNodesViewSource;
        private readonly CollectionViewSource criteriaViewSource;
        private readonly CollectionViewSource imagesViewSource;
        private readonly CollectionViewSource sectionTypesViewSource;

        public MainWindow()
        {
            InitializeComponent();
            applicantsViewSource = (CollectionViewSource)FindResource(nameof(applicantsViewSource));
            castGroupsViewSource = (CollectionViewSource)FindResource(nameof(castGroupsViewSource));
            rootNodesViewSource = (CollectionViewSource)FindResource(nameof(rootNodesViewSource));
            criteriaViewSource = (CollectionViewSource)FindResource(nameof(criteriaViewSource));
            imagesViewSource = (CollectionViewSource)FindResource(nameof(imagesViewSource));
            sectionTypesViewSource = (CollectionViewSource)FindResource(nameof(sectionTypesViewSource));
            CreateTestData();
            _context = new ShowContext(contextOptions);
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            _context.Database.EnsureCreated(); // for demo purposes
            PopulateViews();
        }

        private void CreateTestData()
        {
            using var context = new ShowContext(contextOptions);
            context.Database.EnsureDeleted();
            context.Database.EnsureCreated();
            var s1 = new Section
            {
                Name = "Section 1"
            };
            var s2 = new Section
            {
                Name = "Section 2"
            };
            var i3 = new Item
            {
                Name = "Item 3"
            };
            context.AddRange(s1, s2, i3);
            context.SaveChanges();//TODO do I really need to save these first?
            var sections = context.Nodes.OfType<Section>().ToList();
            var i1 = new Item
            {
                Name = "Item 1a"
            };
            var i2 = new Item
            {
                Name = "Item 2a",
            };
            sections[0].Children.Add(i1);
            sections[1].Children.Add(i2);
            context.SaveChanges();
        }

        private void PopulateViews()
        {
            // Load the entities into EF Core
            _context.Applicants.Load();
            _context.CastGroups.Load();
            _context.Nodes.Load();
            _context.Criteria.Load();
            _context.Images.Load();
            _context.SectionTypes.Load();
            // Put collections into view source
            applicantsViewSource.Source = _context.Applicants.Local.ToObservableCollection();
            castGroupsViewSource.Source = _context.CastGroups.Local.ToObservableCollection();
            rootNodesViewSource.Source = _context.Nodes.Local.ToObservableCollection().Where(n => n.Parent == null);//TODO not sure if this works
            criteriaViewSource.Source = _context.Criteria.Local.ToObservableCollection();
            imagesViewSource.Source = _context.Images.Local.ToObservableCollection();
            sectionTypesViewSource.Source = _context.SectionTypes.Local.ToObservableCollection();
        }

        private void RefreshViews()
        {
            // This updates the views with data generated by DB commit, eg. auto-ids, cascaded-deletes
            foreach (var items_control in this.AllControls<ItemsControl>())
                items_control.Items.Refresh();
        }

        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                _context.SaveChanges(); // all changes were tracked, including deletes
                RefreshViews();
            } catch (InvalidOperationException ex)
            {
                MessageBox.Show("Could not save changes: \n" + ex.Message);
                _context.Dispose();
                _context = new ShowContext(contextOptions);
                PopulateViews();
            }
        }

        private void UndoButton_Click(object sender, RoutedEventArgs e)
        {
            _context.Dispose();
            _context = new ShowContext(contextOptions);
            PopulateViews();
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            _context.Dispose();
            base.OnClosing(e);
        }
    }
}
