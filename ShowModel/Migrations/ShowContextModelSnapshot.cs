// <auto-generated />
using System;
using Carmen.ShowModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Carmen.ShowModel.Migrations
{
    [DbContext(typeof(ShowContext))]
    partial class ShowContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("ApplicantRole", b =>
                {
                    b.Property<int>("CastApplicantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RolesRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CastApplicantId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("ApplicantRole");
                });

            modelBuilder.Entity("ApplicantTag", b =>
                {
                    b.Property<int>("MembersApplicantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MembersApplicantId", "TagsTagId");

                    b.HasIndex("TagsTagId");

                    b.ToTable("ApplicantTag");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.Ability", b =>
                {
                    b.Property<int>("ApplicantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CriteriaId")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Mark")
                        .HasColumnType("INTEGER");

                    b.HasKey("ApplicantId", "CriteriaId");

                    b.HasIndex("CriteriaId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.AlternativeCast", b =>
                {
                    b.Property<int>("AlternativeCastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<char>("Initial")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AlternativeCastId");

                    b.ToTable("AlternativeCasts");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlternativeCastId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CastGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CastNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PhotoImageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SameCastSetId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ShowRootNodeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ApplicantId");

                    b.HasIndex("AlternativeCastId");

                    b.HasIndex("CastGroupId");

                    b.HasIndex("PhotoImageId");

                    b.HasIndex("SameCastSetId");

                    b.HasIndex("ShowRootNodeId");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.CastGroup", b =>
                {
                    b.Property<int>("CastGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AlternateCasts")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("RequiredCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("CastGroupId");

                    b.ToTable("CastGroups");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.SameCastSet", b =>
                {
                    b.Property<int>("SameCastSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("SameCastSetId");

                    b.ToTable("SameCastSets");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("IconImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.HasIndex("IconImageId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Carmen.ShowModel.Criterias.Criteria", b =>
                {
                    b.Property<int>("CriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("MaxMark")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Primary")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Required")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("CriteriaId");

                    b.ToTable("Criterias");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Criteria");
                });

            modelBuilder.Entity("Carmen.ShowModel.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.Requirement", b =>
                {
                    b.Property<int>("RequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<double>("OverallWeight")
                        .HasColumnType("REAL");

                    b.Property<bool>("Primary")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Reason")
                        .HasColumnType("TEXT");

                    b.Property<double>("SuitabilityWeight")
                        .HasColumnType("REAL");

                    b.HasKey("RequirementId");

                    b.ToTable("Requirements");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Requirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.Node", b =>
                {
                    b.Property<int>("NodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentNodeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NodeId");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("Nodes");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Node");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.SectionType", b =>
                {
                    b.Property<int>("SectionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowConsecutiveItems")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowMultipleRoles")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowNoRoles")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SectionTypeId");

                    b.ToTable("SectionTypes");
                });

            modelBuilder.Entity("CastGroupRequirement", b =>
                {
                    b.Property<int>("RequirementsRequirementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedByCastGroupsCastGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RequirementsRequirementId", "UsedByCastGroupsCastGroupId");

                    b.HasIndex("UsedByCastGroupsCastGroupId");

                    b.ToTable("CastGroupRequirement");
                });

            modelBuilder.Entity("CombinedRequirementRequirement", b =>
                {
                    b.Property<int>("SubRequirementsRequirementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedByCombinedRequirementsRequirementId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SubRequirementsRequirementId", "UsedByCombinedRequirementsRequirementId");

                    b.HasIndex("UsedByCombinedRequirementsRequirementId");

                    b.ToTable("CombinedRequirementRequirement");
                });

            modelBuilder.Entity("ItemRole", b =>
                {
                    b.Property<int>("ItemsNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RolesRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ItemsNodeId", "RolesRoleId");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("ItemRole");
                });

            modelBuilder.Entity("RequirementRole", b =>
                {
                    b.Property<int>("RequirementsRequirementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedByRolesRoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RequirementsRequirementId", "UsedByRolesRoleId");

                    b.HasIndex("UsedByRolesRoleId");

                    b.ToTable("RequirementRole");
                });

            modelBuilder.Entity("RequirementTag", b =>
                {
                    b.Property<int>("RequirementsRequirementId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedByTagsTagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RequirementsRequirementId", "UsedByTagsTagId");

                    b.HasIndex("UsedByTagsTagId");

                    b.ToTable("RequirementTag");
                });

            modelBuilder.Entity("Carmen.ShowModel.Criterias.BooleanCriteria", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Criterias.Criteria");

                    b.HasDiscriminator().HasValue("BooleanCriteria");
                });

            modelBuilder.Entity("Carmen.ShowModel.Criterias.NumericCriteria", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Criterias.Criteria");

                    b.HasDiscriminator().HasValue("NumericCriteria");
                });

            modelBuilder.Entity("Carmen.ShowModel.Criterias.SelectCriteria", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Criterias.Criteria");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("SelectCriteria");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.AbilityExactRequirement", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Requirements.Requirement");

                    b.Property<int>("CriteriaId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CriteriaId");

                    b.Property<double>("ExistingRoleCost")
                        .HasColumnType("REAL")
                        .HasColumnName("AbilityExactRequirement_ExistingRoleCost");

                    b.Property<uint>("RequiredValue")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER");

                    b.HasIndex("CriteriaId");

                    b.HasDiscriminator().HasValue("AbilityExactRequirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.AbilityRangeRequirement", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Requirements.Requirement");

                    b.Property<int>("CriteriaId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CriteriaId");

                    b.Property<double>("ExistingRoleCost")
                        .HasColumnType("REAL");

                    b.Property<uint?>("Maximum")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("Minimum")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ScaleSuitability")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CriteriaId");

                    b.HasDiscriminator().HasValue("AbilityRangeRequirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.AgeRequirement", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Requirements.Requirement");

                    b.Property<uint?>("Maximum")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("Minimum")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("AgeRequirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.CombinedRequirement", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Requirements.Requirement");

                    b.HasDiscriminator().HasValue("CombinedRequirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.GenderRequirement", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Requirements.Requirement");

                    b.Property<uint>("RequiredValue")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("GenderRequirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.NotRequirement", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Requirements.Requirement");

                    b.Property<int>("SubRequirementId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SubRequirementId");

                    b.HasDiscriminator().HasValue("NotRequirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.TagRequirement", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Requirements.Requirement");

                    b.Property<int>("RequiredTagId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("RequiredTagId");

                    b.HasDiscriminator().HasValue("TagRequirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.InnerNode", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Structure.Node");

                    b.HasDiscriminator().HasValue("InnerNode");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.Item", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Structure.Node");

                    b.HasDiscriminator().HasValue("Item");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.AndRequirement", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Requirements.CombinedRequirement");

                    b.Property<bool>("AverageSuitability")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AverageSuitability");

                    b.HasDiscriminator().HasValue("AndRequirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.OrRequirement", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Requirements.CombinedRequirement");

                    b.Property<bool>("AverageSuitability")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("INTEGER")
                        .HasColumnName("AverageSuitability");

                    b.HasDiscriminator().HasValue("OrRequirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.XorRequirement", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Requirements.CombinedRequirement");

                    b.HasDiscriminator().HasValue("XorRequirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.Section", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Structure.InnerNode");

                    b.Property<int>("SectionTypeId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SectionTypeId");

                    b.HasDiscriminator().HasValue("Section");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.ShowRoot", b =>
                {
                    b.HasBaseType("Carmen.ShowModel.Structure.InnerNode");

                    b.Property<bool>("AllowConsecutiveItems")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CastNumberOrderByCriteriaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CastNumberOrderDirection")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("CommonOverallWeight")
                        .HasColumnType("REAL");

                    b.Property<int?>("LogoImageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShowDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WeightExistingRoleCosts")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CastNumberOrderByCriteriaId");

                    b.HasIndex("LogoImageId");

                    b.HasDiscriminator().HasValue("ShowRoot");
                });

            modelBuilder.Entity("ApplicantRole", b =>
                {
                    b.HasOne("Carmen.ShowModel.Applicants.Applicant", null)
                        .WithMany()
                        .HasForeignKey("CastApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carmen.ShowModel.Structure.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicantTag", b =>
                {
                    b.HasOne("Carmen.ShowModel.Applicants.Applicant", null)
                        .WithMany()
                        .HasForeignKey("MembersApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carmen.ShowModel.Applicants.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.Ability", b =>
                {
                    b.HasOne("Carmen.ShowModel.Applicants.Applicant", "Applicant")
                        .WithMany("Abilities")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carmen.ShowModel.Criterias.Criteria", "Criteria")
                        .WithMany("Abilities")
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.Applicant", b =>
                {
                    b.HasOne("Carmen.ShowModel.Applicants.AlternativeCast", "AlternativeCast")
                        .WithMany("Members")
                        .HasForeignKey("AlternativeCastId");

                    b.HasOne("Carmen.ShowModel.Applicants.CastGroup", "CastGroup")
                        .WithMany("Members")
                        .HasForeignKey("CastGroupId");

                    b.HasOne("Carmen.ShowModel.Image", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoImageId");

                    b.HasOne("Carmen.ShowModel.Applicants.SameCastSet", "SameCastSet")
                        .WithMany("Applicants")
                        .HasForeignKey("SameCastSetId");

                    b.HasOne("Carmen.ShowModel.Structure.ShowRoot", "ShowRoot")
                        .WithMany()
                        .HasForeignKey("ShowRootNodeId");

                    b.Navigation("AlternativeCast");

                    b.Navigation("CastGroup");

                    b.Navigation("Photo");

                    b.Navigation("SameCastSet");

                    b.Navigation("ShowRoot");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.Tag", b =>
                {
                    b.HasOne("Carmen.ShowModel.Image", "Icon")
                        .WithMany()
                        .HasForeignKey("IconImageId");

                    b.OwnsMany("Carmen.ShowModel.Structure.CountByGroup", "CountByGroups", b1 =>
                        {
                            b1.Property<int>("TagId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("CastGroupId")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("Count")
                                .HasColumnType("INTEGER");

                            b1.HasKey("TagId", "CastGroupId");

                            b1.HasIndex("CastGroupId");

                            b1.ToTable("Tags_CountByGroups");

                            b1.HasOne("Carmen.ShowModel.Applicants.CastGroup", "CastGroup")
                                .WithMany()
                                .HasForeignKey("CastGroupId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("TagId");

                            b1.Navigation("CastGroup");
                        });

                    b.Navigation("CountByGroups");

                    b.Navigation("Icon");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.Node", b =>
                {
                    b.HasOne("Carmen.ShowModel.Structure.InnerNode", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentNodeId");

                    b.OwnsMany("Carmen.ShowModel.Structure.CountByGroup", "CountByGroups", b1 =>
                        {
                            b1.Property<int>("NodeId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("CastGroupId")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("Count")
                                .HasColumnType("INTEGER");

                            b1.HasKey("NodeId", "CastGroupId");

                            b1.HasIndex("CastGroupId");

                            b1.ToTable("Nodes_CountByGroups");

                            b1.HasOne("Carmen.ShowModel.Applicants.CastGroup", "CastGroup")
                                .WithMany()
                                .HasForeignKey("CastGroupId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("NodeId");

                            b1.Navigation("CastGroup");
                        });

                    b.Navigation("CountByGroups");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.Role", b =>
                {
                    b.OwnsMany("Carmen.ShowModel.Structure.CountByGroup", "CountByGroups", b1 =>
                        {
                            b1.Property<int>("RoleId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("CastGroupId")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("Count")
                                .HasColumnType("INTEGER");

                            b1.HasKey("RoleId", "CastGroupId");

                            b1.HasIndex("CastGroupId");

                            b1.ToTable("Roles_CountByGroups");

                            b1.HasOne("Carmen.ShowModel.Applicants.CastGroup", "CastGroup")
                                .WithMany()
                                .HasForeignKey("CastGroupId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("RoleId");

                            b1.Navigation("CastGroup");
                        });

                    b.Navigation("CountByGroups");
                });

            modelBuilder.Entity("CastGroupRequirement", b =>
                {
                    b.HasOne("Carmen.ShowModel.Requirements.Requirement", null)
                        .WithMany()
                        .HasForeignKey("RequirementsRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carmen.ShowModel.Applicants.CastGroup", null)
                        .WithMany()
                        .HasForeignKey("UsedByCastGroupsCastGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CombinedRequirementRequirement", b =>
                {
                    b.HasOne("Carmen.ShowModel.Requirements.Requirement", null)
                        .WithMany()
                        .HasForeignKey("SubRequirementsRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carmen.ShowModel.Requirements.CombinedRequirement", null)
                        .WithMany()
                        .HasForeignKey("UsedByCombinedRequirementsRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemRole", b =>
                {
                    b.HasOne("Carmen.ShowModel.Structure.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemsNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carmen.ShowModel.Structure.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequirementRole", b =>
                {
                    b.HasOne("Carmen.ShowModel.Requirements.Requirement", null)
                        .WithMany()
                        .HasForeignKey("RequirementsRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carmen.ShowModel.Structure.Role", null)
                        .WithMany()
                        .HasForeignKey("UsedByRolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequirementTag", b =>
                {
                    b.HasOne("Carmen.ShowModel.Requirements.Requirement", null)
                        .WithMany()
                        .HasForeignKey("RequirementsRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Carmen.ShowModel.Applicants.Tag", null)
                        .WithMany()
                        .HasForeignKey("UsedByTagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.AbilityExactRequirement", b =>
                {
                    b.HasOne("Carmen.ShowModel.Criterias.Criteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.AbilityRangeRequirement", b =>
                {
                    b.HasOne("Carmen.ShowModel.Criterias.Criteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criteria");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.NotRequirement", b =>
                {
                    b.HasOne("Carmen.ShowModel.Requirements.Requirement", "SubRequirement")
                        .WithMany()
                        .HasForeignKey("SubRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubRequirement");
                });

            modelBuilder.Entity("Carmen.ShowModel.Requirements.TagRequirement", b =>
                {
                    b.HasOne("Carmen.ShowModel.Applicants.Tag", "RequiredTag")
                        .WithMany()
                        .HasForeignKey("RequiredTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredTag");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.Section", b =>
                {
                    b.HasOne("Carmen.ShowModel.Structure.SectionType", "SectionType")
                        .WithMany("Sections")
                        .HasForeignKey("SectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SectionType");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.ShowRoot", b =>
                {
                    b.HasOne("Carmen.ShowModel.Criterias.Criteria", "CastNumberOrderBy")
                        .WithMany()
                        .HasForeignKey("CastNumberOrderByCriteriaId");

                    b.HasOne("Carmen.ShowModel.Image", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoImageId");

                    b.Navigation("CastNumberOrderBy");

                    b.Navigation("Logo");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.AlternativeCast", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.Applicant", b =>
                {
                    b.Navigation("Abilities");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.CastGroup", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Carmen.ShowModel.Applicants.SameCastSet", b =>
                {
                    b.Navigation("Applicants");
                });

            modelBuilder.Entity("Carmen.ShowModel.Criterias.Criteria", b =>
                {
                    b.Navigation("Abilities");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.SectionType", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Carmen.ShowModel.Structure.InnerNode", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
